// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthServiceClient is the client API for EthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthServiceClient interface {
	GetBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*GetBlockByNumberResponse, error)
	GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error)
}

type ethServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthServiceClient(cc grpc.ClientConnInterface) EthServiceClient {
	return &ethServiceClient{cc}
}

func (c *ethServiceClient) GetBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*GetBlockByNumberResponse, error) {
	out := new(GetBlockByNumberResponse)
	err := c.cc.Invoke(ctx, "/eth_proxy.EthService/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethServiceClient) GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error) {
	out := new(GetTxResponse)
	err := c.cc.Invoke(ctx, "/eth_proxy.EthService/GetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthServiceServer is the server API for EthService service.
// All implementations must embed UnimplementedEthServiceServer
// for forward compatibility
type EthServiceServer interface {
	GetBlockByNumber(context.Context, *GetBlockByNumberRequest) (*GetBlockByNumberResponse, error)
	GetTx(context.Context, *GetTxRequest) (*GetTxResponse, error)
	mustEmbedUnimplementedEthServiceServer()
}

// UnimplementedEthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEthServiceServer struct {
}

func (UnimplementedEthServiceServer) GetBlockByNumber(context.Context, *GetBlockByNumberRequest) (*GetBlockByNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedEthServiceServer) GetTx(context.Context, *GetTxRequest) (*GetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (UnimplementedEthServiceServer) mustEmbedUnimplementedEthServiceServer() {}

// UnsafeEthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthServiceServer will
// result in compilation errors.
type UnsafeEthServiceServer interface {
	mustEmbedUnimplementedEthServiceServer()
}

func RegisterEthServiceServer(s grpc.ServiceRegistrar, srv EthServiceServer) {
	s.RegisterService(&EthService_ServiceDesc, srv)
}

func _EthService_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServiceServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth_proxy.EthService/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServiceServer).GetBlockByNumber(ctx, req.(*GetBlockByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthService_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServiceServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth_proxy.EthService/GetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServiceServer).GetTx(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EthService_ServiceDesc is the grpc.ServiceDesc for EthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eth_proxy.EthService",
	HandlerType: (*EthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockByNumber",
			Handler:    _EthService_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetTx",
			Handler:    _EthService_GetTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/etherium-proxy.proto",
}
